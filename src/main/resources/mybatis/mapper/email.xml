<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.email.repository.EmailRepository">
	<!-- 받는 email List -->
	<select id="selectReceiveEmail" resultType="emailList" parameterType="map">
		<![CDATA[
			select distinct 
				   r.receive_email_id as receiveEmailId,
				   s.received_emp_id as receiveId,
				   r.sent_emp_id as sentId,
				   e.name as sentName,
				   c.title, s.sent_date as sentDate,
				   c.important
			from receive_email r, email_content c, send_email s, employees e
			where s.RECEIVED_EMP_ID = #{receiveId} 
				  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and r.trash_date is null
				  and e.emp_id = r.sent_emp_id
			order by s.sent_date desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
		]]>
	
	</select>
	
	<!-- 받은 email 총 개수 -->
	<select id="selectReceiveEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			select count(s.send_email_id)
			from email_content c, send_email s, receive_email r
			where s.RECEIVED_EMP_ID = #{receiveId} 
				and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				and r.trash_date is null
		]]>
	
	</select>
	
	<!-- 보낸 email 총 개수 -->
	<select id="selectSendEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			SELECT COUNT(R.RECEIVE_EMAIL_ID)
			FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
			WHERE r.SENT_EMP_ID = #{sendId} 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID 
				  and s.trash_date is null
		]]>
	
	</select>
	
	<!-- 보낸 email List -->
	<select id="selectSendEmail" parameterType="map" resultType="emailList">
		<![CDATA[
			select distinct 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   e.name as receiveName,
				   r.read_date as readDate,
				   c.important
        	from receive_email r, email_content c, send_email s,  employees e
        	where r.SENT_EMP_ID = #{sendId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		
		]]>
	</select>
	
	<!-- 보낸 메일 중 읽은 메일 개수 -->
	<select id="selectReadEmailCount" parameterType="String" resultType="int">
		<![CDATA[
				SELECT COUNT(R.RECEIVE_EMAIL_ID)
				FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
				WHERE r.SENT_EMP_ID = #{sendId}
					  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID
					  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
					  and r.READ_DATE is not null
					  and s.trash_date is null
			]]>
	
	</select>
	
	<!-- 보낸 메일 중 읽은 email List -->
	<select id="selectReadEmail" parameterType="map" resultType="emailList">
		<![CDATA[
			select distinct 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   r.read_date as readDate,
				   e.name as receiveName,
				   c.important
        	from receive_email r, email_content c, send_email s, employees e
        	where r.SENT_EMP_ID = #{sendId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and r.READ_DATE is not null
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		]]>
	</select>
	
	<!-- 보낸 이메일 중 안읽은 email Count -->
	<select id="selectUnReadEmailCount" parameterType="String" resultType="int">
		<![CDATA[
				SELECT COUNT(R.RECEIVE_EMAIL_ID)
				FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
				WHERE r.SENT_EMP_ID = #{sendId}
					  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID
					  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
					  and r.READ_DATE is null
					  and s.trash_date is null
			]]>
	</select>
	
	<!-- 보낸 이메일 중 안읽은 email List -->
	<select id="selectUnReadEmail" parameterType="map" resultType="emailList">
	<![CDATA[
			select distinct
				   s.send_email_id as sendEmailid,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId, 
				   c.title, s.sent_date as sentDate, 
				   r.read_date as readDate, 
				   s.trash_date as strashDate, 
				   r.trash_date rtrashDate,
				   e.name as receiveName,
				   c.important
        	from receive_email r, email_content c, send_email s, employees e
        	where r.SENT_EMP_ID = #{sendId}
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and r.READ_DATE is null
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		
		]]>
	
	</select>
	
	<!-- 나의 메일 중 쓰레기통에 있는 메일 count -->
	<select id="selectTrashEmailCount" parameterType="String" resultType="int">
	<![CDATA[
			select count(*)
			from (
		        select r.receive_email_id as receiveEmailId,
		        	   r.SENT_EMP_ID as sentId,
		        	   s.received_emp_id as receiveId,
		        	   s.sent_date as sentDate,
		        	   c.title, r.trash_date rtrashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	  and r.is_deleted = 0
		        union 
		        select  s.send_email_id as sendEmailId,
		        		r.SENT_EMP_ID as sentId,
		        		s.received_emp_id as receiveId,
		        		s.sent_date as sentDate, c.title,
		        		s.trash_date strashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
        		)
			]]>
	</select>
	
	<!-- 나의 메일 중 쓰레기통에 있는 메일 list -->
	<select id="selectTrashEmail" parameterType="map" resultType="emailList">
			<![CDATA[
			select * 
			from (
		        select s.send_email_id as sendEmailId,
                       r.receive_email_id as receiveEmailId,
		        	   r.SENT_EMP_ID as sentId,
		        	   s.received_emp_id as receiveId,
		        	   s.sent_date as sentDate,
		        	   c.title, r.trash_date rtrashDate,
                       s.trash_date strashDate,
		        	   e.name as name,
		        	   c.important
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	  and r.is_deleted = 0
		        	  and e.emp_id = r.sent_emp_id
		        union 
		        select  s.send_email_id as sendEmailId,
                        r.receive_email_id as receiveEmailId,
		        	    r.SENT_EMP_ID as sentId,
		        		s.received_emp_id as receiveId,
		        		s.sent_date as sentDate, c.title,
                        r.trash_date rtrashDate,
		        		s.trash_date strashDate,
		        		e.name as name,
		        		c.important
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
		        	  and e.emp_id = s.received_emp_id
        		)
			order by sentDate desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
			]]>
	</select>
	
	<!-- 나의 임시저장 메일 count -->
	<select id="selectTemptEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			select count(*)
			from temp_email t
			where writer = #{empId}
		]]>
	
	</select>
	
	<!-- 나의 임시 저장 메일 list -->
	<select id="selectTempEmail" parameterType="map" resultType="emailList">
		<![CDATA[
		select t.temp_email_id as tempEmailId,
			   t.writer as sentId,
			   t.temp_date as tempDate,
			   c.title
		from temp_email t, email_content c
		where t.email_content_id = c.email_content_id
			  and writer = #{empId}
		order by tempDate desc
		offset #{pager.startRowNo}-1 rows
		fetch first 10 rows only
		]]>
	
	</select>
	
	<!-- 중요메일 있는지 판단 -->
	<select id="selectImportantEmail" parameterType="int" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM  EMAIL_CONTENT c
		WHERE c.important = 1 
			  and c.email_content_id = #{emailContentId}
		]]>
	</select>
	
	<select id="selectEmailContentId" parameterType="int" resultType="int">
		<![CDATA[
		select c.email_content_id
		from email_content c, receive_email r, send_email s
		where (r.receive_email_id = #{emailId} or s.send_email_id = #{emailId}) 
			  and c.email_content_id = r.email_content_id
			  and c.email_content_id = s.email_content_id
		]]>
	</select>
	
	<delete id="deleteTempEmail" parameterType="int">
		<![CDATA[
			delete temp_email
			where temp_email_id = #{emailId}
		]]>
	</delete>
	
	<update id="updateTrashReceiveEmail" parameterType="int">
		<![CDATA[
			update receive_email
			set is_deleted = 1
			where receive_email_id = #{emailId}		
		]]>
	</update>
	
	<update id="updateTrashSendEmail" parameterType="int">
	<![CDATA[
			update send_email
			set is_deleted = 1
			where send_email_id = #{emailId}		
		]]>
	
	</update>
	
	<update id="updateReceiveEmailTrashDate" parameterType="int">
		<![CDATA[
			update receive_email
			set trash_date = sysdate
			where receive_email_id = #{emailId}
		]]>
	</update>
	
	<update id="updateSendEmailTrashDate" parameterType="int">
		<![CDATA[
			update send_email
			set trash_date = sysdate
			where send_email_id = #{emailId}
		]]>
	</update>
	
	<update id="updateReceiveEmailRestore" parameterType="int">
		<![CDATA[
			update receive_email
			set trash_date = null
			where receive_email_id = #{emailId}
		]]>
			
	</update>
	
	<update id="updateSendEmailRestore" parameterType="int">
		<![CDATA[
			update send_email
			set trash_date = null
			where send_email_id = #{emailId}
		]]>
	
	</update>
	
	<insert id="insertEmailContent" parameterType="emailContent">
		<selectKey keyProperty="emailContentId" resultType="int" order="AFTER"> 
			SELECT seq_email_content.CURRVAL 
			FROM DUAL
         </selectKey>
         <![CDATA[
         insert into email_content(EMAIL_CONTENT_ID, TITLE, CONTENT, IMPORTANT)
         values(seq_email_content.NEXTVAL, #{title}, #{content}, #{important})
         ]]>
	</insert>
	
	<insert id="insertSendEmail" parameterType="sendEmail">
		<![CDATA[
		insert into send_email(SEND_EMAIL_ID, RECEIVED_EMP_ID, SENT_DATE, EMAIL_CONTENT_ID, IS_DELETED)
		values(seq_email.NEXTVAL, #{receiveEmpId}, sysdate, #{emailContentId}, 0)
		]]>
	</insert>
	
	<insert id="insertReceiveEmail" parameterType="receiveEmail">
		<![CDATA[
		insert into receive_email(RECEIVE_EMAIL_ID, SENT_EMP_ID, EMAIL_CONTENT_ID, IS_DELETED)
		values(seq_email.NEXTVAL, #{sentEmpId}, #{emailContentId}, 0)
		]]>
	</insert>
	
	<select id="selectReceiveEmailDetail" parameterType="int" resultType="emailDetail">
		<![CDATA[
		select r.RECEIVE_EMAIL_ID as receiveEmailId, r.SENT_EMP_ID as sendId, r.IS_DELETED as isDeleted, g.grade_name as sendGrade,
			   r.TRASH_DATE as trash_date, c.CONTENT, c.TITLE, c.IMPORTANT, s.SENT_DATE as sentDate, e.name as sendName
			   , r.trash_date as rtrashDate, r.read_date as readDate
		from email_content c, receive_email r, send_email s, employees e, grade g
		where c.email_content_id = r.email_content_id
			  and s.email_content_id = c.email_content_id
			  and r.receive_email_id = #{emailId}
			  and r.SENT_EMP_ID = e.emp_id
			  and e.grade_id = g.grade_id
		
		]]>
	
	</select>
	
	<update id="updateReadDate" parameterType="int">
		<![CDATA[
		update receive_email
		set read_date = sysdate
		where receive_email_id = #{receiveEmailId}
		
		]]>
	
	</update>
	
	<select id="selectSendEmailDetail" parameterType="int" resultType="emailDetail">
		<![CDATA[
		select s.send_EMAIL_ID as sendEmailId, s.RECEIVED_EMP_ID as receiveId, 
			   s.IS_DELETED as isDeleted, g.grade_name as receiveGrade,
			   s.TRASH_DATE as strashDate, c.CONTENT, c.TITLE, c.IMPORTANT,
			   s.SENT_DATE as sentDate, e.name as receiveName,
			   r.read_date as readDate
		from email_content c, receive_email r, send_email s, employees e, grade g
		where c.email_content_id = r.email_content_id
			  and s.email_content_id = c.email_content_id
			  and s.send_email_id = #{emailId}
			  and s.RECEIVED_EMP_ID = e.emp_id
			  and e.grade_id = g.grade_id
		]]>
	</select>
	
	<delete id="deleteSendEmail" parameterType="int">
		<![CDATA[
			delete send_email
			where send_email_id = #{emailId}
		]]>
	</delete>
	
	<select id="selectReceiveEmailIdBySendEmail" parameterType="int" resultType="int">
		<![CDATA[
			select receive_email_id
			from receive_email r, send_email s, email_content c
			where s.send_email_id = #{emailId} 
				  and s.email_content_id = c.email_content_id 
				  and c.email_content_id = r.email_content_id
		]]>
	
	
	</select>
	
	<delete id="deleteReceiveEmail" parameterType="int">
	 	<![CDATA[
	 		delete receive_email
	 		where receive_email_id = #{emailId}
	 	]]>
	</delete>
	
	<select id="selectSendEmailByContentId" parameterType="int" resultType="int">
		<![CDATA[
			select count(s.send_email_id)
			from  send_email s, email_content c
			where c.email_content_id = #{emailContentId} and
				  c.email_content_id = s.send_email_id
		]]>
	</select>
	
	<select id="selectReceiveEmailByContentId" parameterType="int" resultType="int">
		<![CDATA[
			select count(r.receive_email_id)
			from receive_email r, email_content c
			where c.email_content_id = #{emailContentId} and
				  c.email_content_id = r.receive_email_id
		
		]]>
	
	</select>
	
	<delete id="deleteEmailContent" parameterType="int">
		<![CDATA[
			delete email_content
			where email_content_id = #{emailContentId}
		]]>
	</delete>
	
	<!-- 메인에서 보일 보낸 email List -->
	<select id="selectMainSendEmail" parameterType="String" resultType="mainEmailList">
		<![CDATA[
			select 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   e.name as receiveName,
				   e.PROFILE_CONTENT_TYPE as receiveProfileContentType,
				   e.PROFILE_DATA as receiveProfileData,
				   r.read_date as readDate,
				   c.important
        	from receive_email r, email_content c, send_email s,  employees e
        	where r.SENT_EMP_ID = #{sendId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
        	order by s.sent_date desc
        	offset 0 rows
        	fetch first 5 rows only
		
		]]>
	</select>
	
	<!-- 받는 email List -->
	<select id="selectMainReceiveEmail" resultType="mainEmailList" parameterType="String">
		<![CDATA[
			select
				   r.receive_email_id as receiveEmailId,
				   s.received_emp_id as receiveId,
				   r.sent_emp_id as sentId,
				   e.name as sentName,
				   e.PROFILE_CONTENT_TYPE as sendProfileContentType,
				   e.PROFILE_DATA as sendProfileData,
				   c.title, s.sent_date as sentDate,
				   c.important
			from receive_email r, email_content c, send_email s, employees e
			where s.RECEIVED_EMP_ID = #{receiveId} 
				  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and r.trash_date is null
				  and e.emp_id = r.sent_emp_id
			order by s.sent_date desc
			offset 0 rows
			fetch first 5 rows only
		]]>
	
	</select>
	
	<insert id="insertTempEmail" parameterType="tempEmail">
		insert into temp_email (TEMP_EMAIL_ID
		<if test="receiveId != null">
			, RECEIVED_EMP_ID
		</if>
			,TEMP_DATE, EMAIL_CONTENT_ID, WRITER
		)
		
		values (
		seq_temp_email.nextval
		<if test="receiveId != null">
			, #{receiveId}
		</if>
			, sysdate, #{emailContentId}, #{sentId}
		)
	</insert>
	
	<select id="selectTempEailDetail" parameterType="int" resultType="tempEmail">
		<![CDATA[
		select t.temp_email_id as tempEmailId,
			   t.writer as sentId,
			   c.title,
			   c.content,
			   t.received_emp_id as receiveId,
			   c.email_content_id as emailContentId
		from temp_email t, email_content c
		where t.email_content_id = c.email_content_id
			  and temp_email_id = #{tempEmailId}
		]]>
	</select>
	
	<update id="updateTempEmail" parameterType="tempEmail">
	<![CDATA[
		update temp_email
		set received_emp_id = #{receiveId}, temp_date = sysdate
		where temp_email_id = #{tempEmailId}
		]]>
	</update>
	
	<update id="updateEmailContent" parameterType="emailContent">
	<![CDATA[
		update email_content
		set title = #{title}, content = #{content}
		where email_content_id = #{emailContentId}
		]]>
	
	</update>
	
	<select id="selectReceiveEmailCountByEmailId" parameterType="int" resultType="int">
		select count(receive_email_id)
			from  receive_email
			where receive_email_id = #{emailId}
	</select>
	
	<select id="selectSearchTempCount" parameterType="map" resultType="int">
		 	select count(temp_email_id) 
            from temp_email t, email_content c, employees e
            where 
            t.email_content_id = c.email_content_id 
            and t.writer = e.emp_Id
            and t.writer = #{empId}
            and (e.name like '%' || #{keyword} || '%' or c.title like '%' || #{keyword} || '%')
	</select>
	
	<select id="selectSearchTempList" parameterType="map" resultType="emailList">
		select t.temp_email_id as tempEmailId,
			   t.writer as sentId,
			   t.temp_date as tempDate,
			   c.title
		from temp_email t, email_content c, employees e
		where t.email_content_id = c.email_content_id 
			  and t.writer = e.emp_Id
			  and t.writer = #{empId}
			  and (e.name like '%' || #{keyword} || '%' 
			  or c.title like '%' || #{keyword} || '%' )
		order by tempDate desc
		offset #{pager.startRowNo}-1 rows
		fetch first 10 rows only
	</select>
	
	<select id="selectSearchTrashCount" parameterType="map" resultType="int">
		select count(*) 
			from (
		        select count(*)
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	  and r.is_deleted = 0
		        	  and e.emp_id = r.sent_emp_id
		        	  and (e.name like '%' || #{keyword} || '%' 
			  		  or c.title like '%' || #{keyword} || '%' )
		        union 
		        select  count(*)
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
		        	  and e.emp_id = s.received_emp_id
		        	  and (e.name like '%' || #{keyword} || '%' 
			 		  or c.title like '%' || #{keyword} || '%' )
        		)
	
	</select>
	
	<!-- 나의 메일 중 쓰레기통에 있는 메일 list -->
	<select id="selectSearchTrashList" parameterType="map" resultType="emailList">
			select * 
			from (
		        select s.send_email_id as sendEmailId,
                       r.receive_email_id as receiveEmailId,
		        	   r.SENT_EMP_ID as sentId,
		        	   s.received_emp_id as receiveId,
		        	   s.sent_date as sentDate,
		        	   c.title, r.trash_date rtrashDate,
                       s.trash_date strashDate,
		        	   e.name as name,
		        	   c.important
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	  and r.is_deleted = 0
		        	  and e.emp_id = r.sent_emp_id
		        	  and (e.name like '%' || #{keyword} || '%' 
			 		  or c.title like '%' || #{keyword} || '%' )
		        union 
		        select  s.send_email_id as sendEmailId,
                        r.receive_email_id as receiveEmailId,
		        	    r.SENT_EMP_ID as sentId,
		        		s.received_emp_id as receiveId,
		        		s.sent_date as sentDate, c.title,
                        r.trash_date rtrashDate,
		        		s.trash_date strashDate,
		        		e.name as name,
		        		c.important
		        from email_content c, send_email s,receive_email r, employees e
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
		        	  and e.emp_id = s.received_emp_id
		        	  and (e.name like '%' || #{keyword} || '%' 
			 		  or c.title like '%' || #{keyword} || '%' )
        		)
			order by sentDate desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
			
	</select>
	
	<select id="selectSearchReceiveCount" parameterType="map" resultType="int">
		select count(s.send_email_id)
			from receive_email r, email_content c, send_email s, employees e
			where s.RECEIVED_EMP_ID = #{empId} 
				and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				and r.trash_date is null
				and e.emp_id = r.sent_emp_id
				and (e.name like '%' || #{keyword} || '%' 
			 		 or c.title like '%' || #{keyword} || '%' )
	
	</select>
	
	<select id="selectSearchReceiveList" parameterType="map" resultType="emailList">
		select distinct 
				   r.receive_email_id as receiveEmailId,
				   s.received_emp_id as receiveId,
				   r.sent_emp_id as sentId,
				   e.name as sentName,
				   c.title, s.sent_date as sentDate,
				   c.important
			from receive_email r, email_content c, send_email s, employees e
			where s.RECEIVED_EMP_ID = #{empId} 
				  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and r.trash_date is null
				  and e.emp_id = r.sent_emp_id
				  and (e.name like '%' || #{keyword} || '%' 
			 		 or c.title like '%' || #{keyword} || '%' )
			order by s.sent_date desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
	</select>
	
	<select id="selectSearchSendCount" parameterType="map" resultType="int">
		select distinct count(*)
        	from receive_email r, email_content c, send_email s,  employees e
        	where r.SENT_EMP_ID = #{empId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
              	  and (e.name like '%' || #{keyword} || '%' 
			 		 or c.title like '%' || #{keyword} || '%' )
	</select>
	
	<select id="selectSearchSendList" parameterType="map" resultType="emailList">
		select distinct 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   e.name as receiveName,
				   r.read_date as readDate,
				   c.important
        	from receive_email r, email_content c, send_email s,  employees e
        	where r.SENT_EMP_ID = #{empId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and s.trash_date is null
              	  and e.emp_id = s.received_emp_id
              	   and (e.name like '%' || #{keyword} || '%' 
			 		 or c.title like '%' || #{keyword} || '%' )
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
	</select>
	
	<select id="selectExpiredTrash" parameterType="date" resultType="emailList">
	<![CDATA[
		 select * 
			from (
		        select s.send_email_id as sendEmailId,
                       r.receive_email_id as receiveEmailId,
		        	   r.trash_date rtrashDate,
                       s.trash_date strashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date <= #{sqlDate}
		        union 
		        select  s.send_email_id as sendEmailId,
                        r.receive_email_id as receiveEmailId,
                        r.trash_date rtrashDate,
		        		s.trash_date strashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date <= #{sqlDate}
        		)
        		]]>
	</select>
	
	<update id="updateReceiveDelete" parameterType="int">
		update receive_email
		set is_deleted = 1
		where receive_email_id = #{emailId}
	</update>
	
	<update id="updateSendDelete" parameterType="int">
		update send_email
		set is_deleted = 1
		where send_email_id = #{emailId}
	</update>

	<select id="selectIsDeletedEmail" resultType="int">
		  select c.email_content_id
          from receive_email r, send_email s, email_content c
          where r.email_content_id = c.email_content_id and s.email_content_id = c.email_content_id 
                and (r.is_deleted = 1 and s.is_deleted = 1)
	
	</select>
	
	<select id="selectReceiver" parameterType="String" resultType="int">
		<![CDATA[
			select count(*)
			from employees
			where emp_id = #{receiveId}
		
		
		]]>
	
	</select>
	
	<delete id="deleteTempEmailByContentId" parameterType="int">
		<![CDATA[
			delete temp_email
			where email_content_id = #{contentId}
		
		
		
		]]>
	
	</delete>
	


</mapper>