<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.email.repository.EmailRepository">
	<!-- 받는 email List -->
	<select id="selectReceiveEmail" resultType="emailList" parameterType="map">
		<![CDATA[
			select distinct 
				   r.receive_email_id as receiveEmailId,
				   s.received_emp_id as receiveId,
				   r.sent_emp_id as sentId,
				   c.title, s.sent_date as sentDate
			from receive_email r, email_content c, send_email s
			where s.RECEIVED_EMP_ID = #{receiveId} 
				  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and r.trash_date is null
			order by s.sent_date desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
		]]>
	
	</select>
	
	<!-- 받은 email 총 개수 -->
	<select id="selectReceiveEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			select count(s.send_email_id)
			from email_content c, send_email s, receive_email r
			where s.RECEIVED_EMP_ID = #{receiveId} 
				and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
				and r.trash_date is null
		]]>
	
	</select>
	
	<!-- 보낸 email 총 개수 -->
	<select id="selectSendEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			SELECT COUNT(R.RECEIVE_EMAIL_ID)
			FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
			WHERE r.SENT_EMP_ID = #{sendId} 
				  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID 
				  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID 
				  and s.trash_date is null
		]]>
	
	</select>
	
	<!-- 보낸 email List -->
	<select id="selectSendEmail" parameterType="map" resultType="emailList">
		<![CDATA[
			select distinct 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   r.read_date as readDate
        	from receive_email r, email_content c, send_email s
        	where r.SENT_EMP_ID = #{sendId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and s.trash_date is null
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		
		]]>
	</select>
	
	<!-- 보낸 메일 중 읽은 메일 개수 -->
	<select id="selectReadEmailCount" parameterType="String" resultType="int">
		<![CDATA[
				SELECT COUNT(R.RECEIVE_EMAIL_ID)
				FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
				WHERE r.SENT_EMP_ID = #{sendId}
					  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID
					  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
					  and r.READ_DATE is not null
					  and s.trash_date is null
			]]>
	
	</select>
	
	<!-- 보낸 메일 중 읽은 email List -->
	<select id="selectReadEmail" parameterType="map" resultType="emailList">
		<![CDATA[
			select distinct 
				   s.send_email_id as sendEmailId,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId,
				   c.title, s.sent_date as sentDate,
				   r.read_date as readDate
        	from receive_email r, email_content c, send_email s
        	where r.SENT_EMP_ID = #{sendId} 
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and r.READ_DATE is not null
              	  and s.trash_date is null
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		
		]]>
	</select>
	
	<!-- 보낸 이메일 중 안읽은 email Count -->
	<select id="selectUnReadEmailCount" parameterType="String" resultType="int">
		<![CDATA[
				SELECT COUNT(R.RECEIVE_EMAIL_ID)
				FROM EMAIL_CONTENT c, RECEIVE_EMAIL r, send_email s
				WHERE r.SENT_EMP_ID = #{sendId}
					  and c.EMAIL_CONTENT_ID = r.EMAIL_CONTENT_ID
					  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
					  and r.READ_DATE is null
					  and s.trash_date is null
			]]>
	</select>
	
	<!-- 보낸 이메일 중 안읽은 email List -->
	<select id="selectUnReadEmail" parameterType="map" resultType="emailList">
	<![CDATA[
			select distinct
				   s.send_email_id as sendEmailid,
				   r.sent_emp_id as sentId,
				   s.received_emp_id as receiveId, 
				   c.title, s.sent_date as sentDate, 
				   r.read_date as readDate, 
				   s.trash_date as strashDate, 
				   r.trash_date rtrashDate
        	from receive_email r, email_content c, send_email s
        	where r.SENT_EMP_ID = #{sendId}
        		  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID 
              	  and c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
              	  and r.READ_DATE is null
              	  and s.trash_date is null
        	order by s.sent_date desc
        	offset #{pager.startRowNo}-1 rows
        	fetch first 10 rows only
		
		]]>
	
	</select>
	
	<!-- 나의 메일 중 쓰레기통에 있는 메일 count -->
	<select id="selectTrashEmailCount" parameterType="String" resultType="int">
	<![CDATA[
			select count(*)
			from (
		        select r.receive_email_id as receiveEmailId,
		        	   r.SENT_EMP_ID as sentId,
		        	   s.received_emp_id as receiveId,
		        	   s.sent_date as sentDate,
		        	   c.title, r.trash_date rtrashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	  and r.is_deleted = 0
		        union 
		        select  s.send_email_id as sendEmailId,
		        		r.SENT_EMP_ID as sentId,
		        		s.received_emp_id as receiveId,
		        		s.sent_date as sentDate, c.title,
		        		s.trash_date strashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
        		)
			]]>
	</select>
	
	<!-- 나의 메일 중 쓰레기통에 있는 메일 list -->
	<select id="selectTrashEmail" parameterType="map" resultType="emailList">
			<![CDATA[
			select * 
			from (
		        select r.receive_email_id as receiveEmailId,
		        	   r.SENT_EMP_ID as sentId,
		        	   s.received_emp_id as receiveId,
		        	   s.sent_date as sentDate,
		        	   c.title, r.trash_date rtrashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and r.trash_date is not null
		        	  and s.received_emp_id = #{empId}
		        	   and r.is_deleted = 0
		        union 
		        select  s.send_email_id as sendEmailId,
		        	    r.SENT_EMP_ID as sentId,
		        		s.received_emp_id as receiveId,
		        		s.sent_date as sentDate, c.title,
		        		s.trash_date strashDate
		        from email_content c, send_email s,receive_email r
		        where c.EMAIL_CONTENT_ID = s.EMAIL_CONTENT_ID
		        	  and r.EMAIL_CONTENT_ID = c.EMAIL_CONTENT_ID
		        	  and s.trash_date is not null
		        	  and r.SENT_EMP_ID = #{empId}
		        	  and s.is_deleted = 0
        		)
			order by sentDate desc
			offset #{pager.startRowNo}-1 rows
			fetch first 10 rows only
			]]>
	</select>
	
	<!-- 나의 임시저장 메일 count -->
	<select id="selectTemptEmailCount" parameterType="String" resultType="int">
		<![CDATA[
			select count(*)
			from temp_email t
			where writer = #{empId}
		]]>
	
	</select>
	
	<!-- 나의 임시 저장 메일 list -->
	<select id="selectTempEmail" parameterType="map" resultType="emailList">
		<![CDATA[
		select t.temp_email_id as tempEmailId,
			   t.writer as sentId,
			   t.temp_date as tempDate,
			   c.title
		from temp_email t, email_content c
		where t.email_content_id = c.email_content_id
			  and writer = #{empId}
		order by tempDate desc
		offset #{pager.startRowNo}-1 rows
		fetch first 10 rows only
		]]>
	
	</select>
	
	<!-- 중요메일 있는지 판단 -->
	<select id="selectImportantReceiveEmail" parameterType="int" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM RECEIVE_EMAIL r, EMAIL_CONTENT c
		WHERE r.email_content_id = c.email_content_id 
			  and c.important = 1 
			  and r.receive_email_id = #{emailId}
		]]>
	</select>
	
	<delete id="deleteTempEmail" parameterType="int">
		<![CDATA[
			delete temp_email
			where temp_email_id = #{emailId}
		]]>
	</delete>
	
	<update id="updateTrashReceiveEmail" parameterType="int">
		<![CDATA[
			update receive_email
			set is_deleted = 1
			where receive_email_id = #{emailId}		
		]]>
	</update>
	
	<update id="updateTrashSendEmail" parameterType="int">
	<![CDATA[
			update send_email
			set is_deleted = 1
			where send_email_id = #{emailId}		
		]]>
	
	</update>
	
	<update id="updateReceiveEmailTrashDate" parameterType="int">
		<![CDATA[
			update receive_email
			set trash_date = sysdate
			where receive_email_id = #{emailId}
		]]>
	</update>
	
	<update id="updateSendEmailTrashDate" parameterType="int">
		<![CDATA[
			update send_email
			set trash_date = sysdate
			where send_email_id = #{emailId}
		]]>
	</update>
	
	<update id="updateReceiveEmailRestore" parameterType="int">
		<![CDATA[
			update receive_email
			set trash_date = null
			where receive_email_id = #{emailId}
		]]>
			
	</update>
	
	<update id="updateSendEmailRestore" parameterType="int">
		<![CDATA[
			update send_email
			set trash_date = null
			where send_email_id = #{emailId}
		]]>
	
	</update>



</mapper>